
= rufus-lua CHANGELOG.txt


== rufus-lua - 1.1.2    not yet released

- let Ruby callbacks accept Lua functions as arguments (Gian Perrone)
- add #set_error_handler (based on an initial request by Nathanael Jones)
- fix unstack issue when returning table (https://github.com/lywaterman)
- use "{filename}:#{lineno}" as eval chunk name (suggested by Nathanael Jones)
- wrap Ruby callbacks in CallbackState (Nathanael Jones)
- accept Ruby symbols containing \0 character (Nathanael Jones)


== rufus-lua - 1.1.1    released 2014/07/01

- move from bacon to rspec
- remove double VERSION (Nathanael Jones - https://github.com/nathanaeljones)
- load only one Lua lib (Thanks Nathanael)
- add Rufus::Lua::Lib.path to learn which Lua lib got loaded (idea Nathanael)
- set `ffi_lib_flags(:lazy, :global)` before loading Lua (thanks Nathanael)
- fix panic error when creating new Rufus::Lua::State with specific
  list of lib to load (fix by Matthew Nielsen - https://github.com/xunker)
- read back Lua strings containing \0 bytes (thanks Nathanael Jones)
- let Ruby strings containing \0 bytes go to the Lua side freely (thanks NJ)
- enhanced Rufus::Lua::LuaError by adding filename and lineno - based on
  a suggestion by Nathanael Jones)
- enhanced Rufus::Lua::State#eval by adding optional 'filename' and 'lineno'
  arguments (like Kernel.eval) (hint by Nathanael Jones)


== rufus-lua - 1.1.0    released 2009/09/30

- todo      : Ruby symbols are passed to Lua as strings (Scott)
- todo      : implemented State#function :to_ruby option
- todo      : implemented Table#to_ruby
- todo      : added 'pure' option to Table#to_a
- issue     : added State@callbacks array to preserve callback from GC (Scott)
- issue     : passing tables to ruby functions wrecked arg list. Fixed.
- todo      : added way to load only a given set of libs when State.new (Scott)
- todo      : honouring #to_lua when calling Lua functions from Ruby (Scott)
- todo      : search for dylib in /usr/lib as well (Scott)
- issue #5  : Ruby function more tolerant with block arity.
- issue #4  : Ruby function inverses order of its parameters. Fixed. (Scott)
- todo      : state['a'] = [ 1, 2, 3 ] now possible
- issue #2  : tables returned from Ruby functions were indexed at 0. (Scott)
- issue #3  : passing false from Ruby to Lua twists it to true. (Scott)
- issue #1  : Ruby function return array not OK. Fixed. (Thanks Scott Persinger)


== rufus-lua - 1.0.0    released 2009/03/27

- automatically creates lib table when defined Ruby function (callback)
- implemented #[]=, #objlen and #size for table
- fixed bug when pushing floats on the stack (float --> double)
- added State#function for defining Ruby functions (callbacks) available via Lua


== rufus-lua - 0.1.0    released 2009/03/16

- initial release

